import streamlit as st
from PIL import Image
import base64
import subprocess
import os
import math
import gmsh
import numpy as np
import matplotlib.pyplot as plt
import multiprocessing
import plotly.graph_objects as go  # –î–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

st.set_page_config(page_title="üåê ", layout="wide")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
def show_code(code, language="python"):
    st.code(code, language)

def run_gmsh(file_path):
    try:
        env = os.environ.copy()
        env["LIBGL_ALWAYS_SOFTWARE"] = "1"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        subprocess.run(["gmsh", file_path], check=True, env=env)
        st.success("Gmsh —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
    except FileNotFoundError:
        st.error("Gmsh –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
    except subprocess.CalledProcessError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Gmsh: {e.returncode}")
        st.text(f"–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏:\n{e.stderr}")

st.write("""##### –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã""")
dimensions = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å",["0D", "1D", "2D", "3D"])
if dimensions == "0D":
    element_0D = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞", ["Point", "Physical Point"])
    if element_0D == "Point":
        st.write("""
        ```bash 
        Point ( expression ) = { expression, expression, expression <, expression > }
        ```
        - **–¢–µ–≥ —Ç–æ—á–∫–∏**
        - **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ X, Y, Z**
        - **–†–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–µ—Ç–∫–∏ –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)**
        """)
        code = """
            //Point
            lc = 1e-2;
            Point(1) = {0, 0, 0, lc};
            Point(2) = {.1, 0, 0, lc};
            Point(3) = {.1, .3, 0, lc};
            Point(4) = {0, .3, 0, lc};
            Geometry.PointNumbers = 1;
            Geometry.Color.Points = {160, 255, 0};
            General.Color.Text = White;
            Geometry.Color.Surfaces = Geometry.Color.Points;
        """
        st.code(code, language="python")

        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä"):
            file_path = "example.geo"
            with open(file_path, "w") as f:
                f.write(code)
            run_gmsh(file_path)

    elif element_0D == "Physical Point":
        st.write("""
        ```bash 
        Physiacal Point ( expression ) = { expression, expression, expression <, expression > }
        ```
        - **–¢–µ–≥ —Ç–æ—á–∫–∏**
        - **–¢–µ–≥–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏**
        –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫ —É–∫–∞–∑–∞–Ω–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Ç–µ–≥–æ–º —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–∞—è –º–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ (–ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π) –∏–ª–∏ –Ω–µ—Ç (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥).
        """)
        code = """
            //Physiacal Point
            lc = 1e-2;
            p = newp;
            Point(p) = {0.07, 0.15, 0.025, lc};
            Physical Point("Embedded point") = {p};

            Geometry.PointNumbers = 1;
            Geometry.Color.Points = {160, 255, 0};
            General.Color.Text = White;
            Geometry.Color.Surfaces = Geometry.Color.Points;
        """
        st.code(code, language="python")

        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä"):
            file_path = "example.geo"
            with open(file_path, "w") as f:
                f.write(code)
            run_gmsh(file_path)

elif dimensions == "1D":
    element_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞", ["Line", "Bezier", "Spline", "BSpline", "Circle", "Ellipse", "Curve Loop", "Physical Curve"])

    if element_type == "Line":
        st.write("""

        ```bash 
        Line ( expression ) = { expression, expression };
        ```
        - **–¢–µ–≥ –æ—Ç—Ä–µ–∑–∫–∞ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏**
        - **–¢–µ–≥–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–µ–∫**

        """)
        col1, col2, col3 = st.columns(3)

        with col1:
            x1 = st.number_input("X1", value=0.0)
            x2 = st.number_input("X2", value=1.0)

        with col2:
            y1 = st.number_input("Y1", value=0.0)
            y2 = st.number_input("Y2", value=0.0)

        with col3:
            z1 = st.number_input("Z1", value=0.0)
            z2 = st.number_input("Z2", value=0.0)
        geo_code = f"""
        //Line
        Point(1) = {{{x1}, {y1}, {z1}, 1.0}};
        Point(2) = {{{x2}, {y2}, {z2}, 1.0}};
        Line(1) = {{1, 2}};
        Geometry.PointNumbers = 1;
        Geometry.Color.Points = {{160, 255, 0}};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;
        """


    elif element_type == "Bezier":
        st.write("""
        ```bash
        Bezier ( expression ) = { expression-list };
        ```
        - **–¢–µ–≥ –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ**
        - **–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫**
        """)
        if "points" not in st.session_state:
            st.session_state.points = [(0, 0, 0), (5, 5, 5), (10, 0, 1)]  # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏

        new_points = []
        for i, (x, y, z) in enumerate(st.session_state.points):
            col1, col2, col3, col4 = st.columns([3, 3, 3, 1])
            x_val = col1.number_input(f"X{i+1}", value=x, key=f"x_{i}")
            y_val = col2.number_input(f"Y{i+1}", value=y, key=f"y_{i}")
            z_val = col3.number_input(f"Z{i+1}", value=z, key=f"z_{i}")
            if col4.button("‚ùå", key=f"remove_{i}"):
                st.session_state.points.pop(i)
                st.rerun()
            new_points.append((x_val, y_val, z_val))
        st.session_state.points = new_points
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É"):
            st.session_state.points.append((0, 0, 0))
            st.rerun()
        geo_code = """//Bezier\n"""
        for i, (x, y, z) in enumerate(st.session_state.points, start=1):
            geo_code += f"Point({i}) = {{{x}, {y}, {z}, 1.0}};\n"
        geo_code += f"Bezier(1) = {{{', '.join(str(i+1) for i in range(len(st.session_state.points)))}}};\n"
        geo_code += f"Geometry.PointNumbers = 1;\n"
        geo_code += "Geometry.Color.Points = {160, 255, 0};\n"
        geo_code += "General.Color.Text = White;\n"
        geo_code += "Geometry.Color.Surfaces = Geometry.Color.Points;\n"
        geo_code = geo_code.lstrip()

            
    elif element_type == "Spline":

        st.write("""

        ```bash 
        Spline ( expression ) = { expression-list };
        ```
        - **–¢–µ–≥ —Å–ø–ª–∞–π–Ω–∞**
        - **–¢–µ–≥–∏ —Ç–æ—á–µ–∫ —Å–ø–ª–∞–π–Ω–∞**
        """)
            
        st.write("""
         - –° –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–ø–ª–∞–π–Ω Catmull-Rom.
         - –° –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OpenCASCADE —Å–æ–∑–¥–∞–µ—Ç—Å—è BSpline.
         - –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Ç–æ–≥–¥–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è.
        """)

        if "points" not in st.session_state:
            st.session_state.points = [(0, 0, 0), (5, 5, 5), (10, 0, 1)]  # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏

        new_points = []
        for i, (x, y, z) in enumerate(st.session_state.points):
            col1, col2, col3, col4 = st.columns([3, 3, 3, 1])
            x_val = col1.number_input(f"X{i+1}", value=x, key=f"x_{i}")
            y_val = col2.number_input(f"Y{i+1}", value=y, key=f"y_{i}")
            z_val = col3.number_input(f"Z{i+1}", value=z, key=f"z_{i}")
            if col4.button("‚ùå", key=f"remove_{i}"):
                st.session_state.points.pop(i)
                st.rerun()
            new_points.append((x_val, y_val, z_val))
        st.session_state.points = new_points
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É"):
            st.session_state.points.append((0, 0, 0))
            st.rerun()
        geo_code = """//Spline\n"""
        for i, (x, y, z) in enumerate(st.session_state.points, start=1):
            geo_code += f"Point({i}) = {{{x}, {y}, {z}, 1.0}};\n"
        geo_code += f"Spline(1) = {{{', '.join(str(i+1) for i in range(len(st.session_state.points)))}}};\n"
        geo_code += f"Geometry.PointNumbers = 1;\n"
        geo_code += "Geometry.Color.Points = {160, 255, 0};\n"
        geo_code += "General.Color.Text = White;\n"
        geo_code += "Geometry.Color.Surfaces = Geometry.Color.Points;\n"
        geo_code = geo_code.lstrip()
            

    elif element_type == "BSpline":
        st.write("""

        ```bash 
        BSpline ( expression ) = { expression-list };
        ```
        - **–¢–µ–≥ —Å–ø–ª–∞–π–Ω–∞**
        - **–¢–µ–≥–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å–ø–ª–∞–π–Ω–∞**
        """)
            
        st.write("""
         - –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Ç–æ–≥–¥–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è.
        """)

        if "points" not in st.session_state:
            st.session_state.points = [(0, 0, 0), (5, 5, 5), (10, 0, 1)]  # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏

        new_points = []
        for i, (x, y, z) in enumerate(st.session_state.points):
            col1, col2, col3, col4 = st.columns([3, 3, 3, 1])
            x_val = col1.number_input(f"X{i+1}", value=x, key=f"x_{i}")
            y_val = col2.number_input(f"Y{i+1}", value=y, key=f"y_{i}")
            z_val = col3.number_input(f"Z{i+1}", value=z, key=f"z_{i}")
            if col4.button("‚ùå", key=f"remove_{i}"):
                st.session_state.points.pop(i)
                st.rerun()
            new_points.append((x_val, y_val, z_val))
        st.session_state.points = new_points
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É"):
            st.session_state.points.append((0, 0, 0))
            st.rerun()
        geo_code = """//BSpline\n"""
        for i, (x, y, z) in enumerate(st.session_state.points, start=1):
            geo_code += f"Point({i}) = {{{x}, {y}, {z}, 1.0}};\n"
        geo_code += f"BSpline(1) = {{{', '.join(str(i+1) for i in range(len(st.session_state.points)))}}};\n"
        geo_code += f"Geometry.PointNumbers = 1;\n"
        geo_code += "Geometry.Color.Points = {160, 255, 0};\n"
        geo_code += "General.Color.Text = White;\n"
        geo_code += "Geometry.Color.Surfaces = Geometry.Color.Points;\n"
        geo_code = geo_code.lstrip()

    elif element_type == "Circle":

        st.write("""

        ```bash 
        Circle ( expression ) = { expression, expression, expression <, ...> };
        ```
        - **–¢–µ–≥ –¥—É–≥–∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏**
        - **–¢–µ–≥–∏ —Ç–æ—á–µ–∫ (–Ω–∞—á–∞–ª–æ –¥—É–≥–∏, —Ü–µ–Ω—Ç—Ä, –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥—É–≥–∏)**
        """)
            
        st.write("""
         - –°–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥—É–≥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ —á–∏—Å–ª–∞ œÄ.
         - –° –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ—Ç 4 –¥–æ 6 —Ç–æ—á–µ–∫, –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞, —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–¥–∏—É—Å, –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —É–≥–æ–ª.
        """)

        if "center" not in st.session_state:
            st.session_state.center = (0, 0, 0)
        if "radius" not in st.session_state:
            st.session_state.radius = 5.0
        
        col1, col2, col3 = st.columns([3, 3, 3])
        cx = col1.number_input("X (—Ü–µ–Ω—Ç—Ä)", value=st.session_state.center[0], key="cx")
        cy = col2.number_input("Y (—Ü–µ–Ω—Ç—Ä)", value=st.session_state.center[1], key="cy")
        cz = col3.number_input("Z (—Ü–µ–Ω—Ç—Ä)", value=st.session_state.center[2], key="cz")
        radius = st.number_input("–†–∞–¥–∏—É—Å", min_value=0.1, key="radius")

        if "center" in st.session_state:
            st.session_state.center = (cx, cy, cz)
    
        st.session_state.center = (cx, cy, cz)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä—ë—Ö —Ç–æ—á–µ–∫ –¥–ª—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
        p1 = (cx - radius, cy, cz)
        p2 = (cx, cy + radius, cz)
        p3 = (cx + radius, cy, cz)
    
        
        geo_code = """//Circle\n"""
        geo_code += f"Point(1) = {{{p1[0]}, {p1[1]}, {p1[2]}, 1.0}};\n"
        geo_code += f"Point(2) = {{{cx}, {cy}, {cz}, 1.0}}; // –¶–µ–Ω—Ç—Ä\n"
        geo_code += f"Point(3) = {{{p3[0]}, {p3[1]}, {p3[2]}, 1.0}};\n"
        geo_code += f"Circle(1) = {{1, 2, 3}};\n"
        geo_code += f"Geometry.PointNumbers = 1;\n"
        geo_code += "Geometry.Color.Points = {160, 255, 0};\n"
        geo_code += "General.Color.Text = White;\n"
        geo_code += "Geometry.Color.Surfaces = Geometry.Color.Points;\n"
        geo_code = geo_code.lstrip()

    elif element_type == "Ellipse":

        st.write("""

        ```bash 
        Ellipse ( expression ) = { expression, expression, expression <, ...> };
        ```
        - **–¢–µ–≥ –¥—É–≥–∏ —ç–ª–ª–∏–ø—Å–∞**
        - **–¢–µ–≥ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏**
        - **–¢–µ–≥ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏**
        - **–¢–µ–≥ —Ç–æ—á–∫–∏ –Ω–∞ –±–æ–ª—å—à–µ–π –ø–æ–ª—É–æ—Å–∏ —ç–ª–ª–∏–ø—Å–∞**
        - **–¢–µ–≥ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏**
        """)
            
        st.write("""
         - –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –±–æ–ª—å—à–æ–π –æ—Å–∏, —Ç—Ä–µ—Ç—å–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å.
         - –° –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ—Ç 5 –¥–æ 7 –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞, —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –±–æ–ª—å—à–æ–π (–≤–¥–æ–ª—å –æ—Å–∏ x) –∏ –º–∞–ª—ã–π —Ä–∞–¥–∏—É—Å—ã (–≤–¥–æ–ª—å –æ—Å–∏ y), –∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–∞ ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π —É–≥–æ–ª.
         - OpenCASCADE –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–≥–∏ —ç–ª–ª–∏–ø—Å–∞ —Å –±–æ–ª—å—à–∏–º —Ä–∞–¥–∏—É—Å–æ–º, –º–µ–Ω—å—à–µ –º–∞–ª–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞.
        """)

        if "center" not in st.session_state:
            st.session_state.center = (0, 0, 0)
        if "semi_major_axis" not in st.session_state:
            st.session_state.semi_major_axis = 5.0
        if "semi_minor_axis" not in st.session_state:
            st.session_state.semi_minor_axis = 3.0
    
        col1, col2, col3 = st.columns([3, 3, 3])
        cx = col1.number_input("X (—Ü–µ–Ω—Ç—Ä)", value=st.session_state.center[0], key="cx")
        cy = col2.number_input("Y (—Ü–µ–Ω—Ç—Ä)", value=st.session_state.center[1], key="cy")
        cz = col3.number_input("Z (—Ü–µ–Ω—Ç—Ä)", value=st.session_state.center[2], key="cz")
    
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É–æ—Å–∏ —ç–ª–ª–∏–ø—Å–∞
        semi_major_axis = st.number_input("–ü–æ–ª—É–æ—Å—å –ø–æ X", min_value=0.1, key="semi_major_axis")
        semi_minor_axis = st.number_input("–ü–æ–ª—É–æ—Å—å –ø–æ Y", min_value=0.1, key="semi_minor_axis")
    
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if "center" in st.session_state:
            st.session_state.center = (cx, cy, cz)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ç—ã—Ä—ë—Ö —Ç–æ—á–µ–∫ –¥–ª—è —ç–ª–ª–∏–ø—Å–∞
        p1 = (cx - semi_major_axis, cy, cz)
        p2 = (cx, cy + semi_minor_axis, cz)
        p3 = (cx + semi_major_axis, cy, cz)
        p4 = (cx, cy - semi_minor_axis, cz)
    
        
        geo_code = """//Ellipse\n"""
        geo_code += f"Point(1) = {{{p1[0]}, {p1[1]}, {p1[2]}, 1.0}};\n"
        geo_code += f"Point(2) = {{{cx}, {cy}, {cz}, 1.0}}; // –¶–µ–Ω—Ç—Ä —ç–ª–ª–∏–ø—Å–∞\n"
        geo_code += f"Point(3) = {{{p3[0]}, {p3[1]}, {p3[2]}, 1.0}};\n"
        geo_code += f"Point(4) = {{{p4[0]}, {p4[1]}, {p4[2]}, 1.0}};\n"
        geo_code += f"Ellipse(1) = {{1, 2, 3, 4}};\n"
        geo_code += f"Geometry.PointNumbers = 1;\n"
        geo_code += "Geometry.Color.Points = {160, 255, 0};\n"
        geo_code += "General.Color.Text = White;\n"
        geo_code += "Geometry.Color.Surfaces = Geometry.Color.Points;\n"
        geo_code = geo_code.lstrip()

    elif element_type == "Curve Loop":
        st.write("""

            ```bash 
            Curve Loop ( expression ) = { expression-list };
            ```
            - **–¢–µ–≥ –∑–∞–º–∫–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—É—Ç—Ä–∞**
            - **–í—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–≥–æ–º —Ü–∏–∫–ª–∞ –∫—Ä–∏–≤–æ–π**
            - **–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ –≤—Å–µ—Ö –∫—Ä–∏–≤—ã—Ö, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —Ü–∏–∫–ª –∫—Ä–∏–≤–æ–π**
            """)
            
        st.write("""
             - –° –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫—Ä–∏–≤—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏.
            """)

        geo_code = """
        // Curve Loop
        Point(1) = {0, 0, 0, 1.0};
        Point(2) = {0.5, -0.3, 0, 1.0};  
        Point(3) = {1, -0.2, 0, 1.0};

        Point(4) = {1.2, 0.5, 0, 1.0};  
        Point(5) = {1.5, 1, 0, 1.0};

         Point(6) = {1.1, 1.5, 0, 1.0};  
         Point(7) = {0.5, 1.7, 0, 1.0};

        Point(8) = {-0.2, 1.6, 0, 1.0};  
        Point(9) = {-0.7, 1, 0, 1.0};

         Point(10) = {-0.6, 0.5, 0, 1.0};  
        Point(11) = {0, 0, 0};  

        Spline(1) = {1, 2, 3};
        Spline(2) = {3, 4, 5};
        Spline(3) = {5, 6, 7};
        Spline(4) = {7, 8, 9};
        Spline(5) = {9, 10, 11};

        Curve Loop(1) = {1, 2, 3, 4, 5};

        Geometry.PointNumbers = 1;
        Geometry.Color.Points = {160, 255, 0}; 
        General.Color.Text = White;
        Geometry.Color.Surfaces = {200, 200, 200}; 
        """

    elif element_type == "Physical Curve":

        st.write("""

            ```bash 
            Physical Curve ( expression | string-expression <, expression> ) <+|->= {expression-list };
            ```
            - **–¢–µ–≥ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π**
            - **–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö –∫—Ä–∏–≤—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π**
        """)
            
        st.write("""
         - –° –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫—Ä–∏–≤—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏.
         - –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–∫–æ–±–æ–∫ —É–∫–∞–∑–∞–Ω–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Ç–µ–≥–æ–º —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–∞—è –º–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ (–ø–æ—Å–ª–µ –∑–∞–ø—è–æ–π) –∏–ª–∏ –Ω–µ—Ç (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥).
         - –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, MSH2) —É–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏–∑–º–µ–Ω–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–µ—Ç–∫–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–º –∫—Ä–∏–≤—ã–º –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ —Å–µ—Ç–∫–∏.
        """)

        geo_code = """
        //Physical Curve
        Point(1) = {0, 0, 0};
        Point(2) = {1, 0, 0};
        Point(3) = {1, 1, 0};
        Point(4) = {0, 1, 0};

        Line(1) = {1, 2};
        Line(2) = {2, 3};
        Line(3) = {3, 4};
        Line(4) = {4, 1};

        Physical Curve("Boundary", 100) = {1, 2, 3, 4};

        Geometry.PointNumbers = 1;
         Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;
        """

    st.code(geo_code, language="python")
    
    def save_example_file():
        example_file_path = "./example.geo"
        with open(example_file_path, "w") as f:
            f.write(geo_code)
        return example_file_path
    
    if st.button("–ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é"):
        example_file_path = save_example_file()
        run_gmsh(example_file_path)
        
elif dimensions == "2D":
    element_type_2D = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞", ["Plane Surface", "Bezier(BSpline) Surface", "Surface Loop", "Physical Surface"])

    if element_type_2D == "Plane Surface":
        st.write("""
            ```bash
            Plane Surface ( expression ) = { expression-list };
            ```

            - **–¢–µ–≥ –ø–ª–æ—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏**
            - **–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤ –∫—Ä–∏–≤—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å**
        """)
            
        st.write("""
         - –ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—É—Ä –∫—Ä–∏–≤—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–Ω–µ—à–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.    
         - –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã –∫—Ä–∏–≤—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.
         - –ö–æ–Ω—Ç—É—Ä –∫—Ä–∏–≤—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ, –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–±—â–∏—Ö –∫—Ä–∏–≤—ã—Ö —Å –≤–Ω–µ—à–Ω–∏–º –∫–æ–Ω—Ç—É—Ä–æ–º –∫—Ä–∏–≤—ã—Ö (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ–º, –∏ –¥–≤–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ).
         - –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –∫–æ–Ω—Ç—É—Ä –∫—Ä–∏–≤—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ, –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–±—â–∏—Ö –∫—Ä–∏–≤—ã—Ö —Å –¥—Ä—É–≥–∏–º –∫–æ–Ω—Ç—É—Ä–æ–º –∫—Ä–∏–≤—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ —Ç–æ–π –∂–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–≤–∞ –∫–æ–Ω—Ç—É—Ä–∞ –∫—Ä–∏–≤—ã—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã).
        """)

        geo_code = """
        //Plane Surface
        Point(1) = {0, 0, 0};
        Point(2) = {5, 0, 0};
        Point(3) = {5, 5, 0};
        Point(4) = {0, 5, 0};

            
        Point(5) = {2.5, 2.5, 0}; // –¶–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞
        Point(6) = {3.5, 2.5, 0}; // –ü—Ä–∞–≤–∞—è —Ç–æ—á–∫–∞
        Point(7) = {2.5, 3.5, 0}; // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
        Point(8) = {1.5, 2.5, 0}; // –õ–µ–≤–∞—è —Ç–æ—á–∫–∞
        Point(9) = {2.5, 1.5, 0}; // –ù–∏–∂–Ω—è—è —Ç–æ—á–∫–∞

        Line(1) = {1, 2};
        Line(2) = {2, 3};
        Line(3) = {3, 4};
        Line(4) = {4, 1};

        Circle(5) = {8, 5, 7};
        Circle(6) = {7, 5, 6};
        Circle(7) = {6, 5, 9};
        Circle(8) = {9, 5, 8};  

        Curve Loop(1) = {1, 2, 3, 4}; // –í–Ω–µ—à–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç
        Curve Loop(2) = {5, 6, 7, 8}; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ (–æ—Ç–≤–µ—Ä—Å—Ç–∏–µ)

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ–º
        Plane Surface(1) = {1, 2};

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏
        Geometry.PointNumbers = 1;
        Geometry.Color.Points = {160, 255, 0};   
        Geometry.Color.Lines = {0, 0, 200};    
        Geometry.Color.Surfaces = {200, 200, 200}; 

        //–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 2D-—Å–µ—Ç–∫–∏
        Mesh 2;

        """

        
    elif element_type_2D == "Bezier(BSpline) Surface":
        st.write("""
            ```bash
            Bezier Surface ( expression ) = { expression-list };
            ```

            - **–¢–µ–≥ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –Ω–∞ –∫—Ä–∏–≤—ã—Ö –ë–µ–∑—å–µ**
            - **–¢–µ–≥ –∫–æ–Ω—Ç—É—Ä–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –Ω–∞ 2, 3, 4 –∫—Ä–∏–≤—ã—Ö –ë–µ–∑—å–µ**
            """)
        st.write("""
            ```bash
            BSpline Surface ( expression ) = { expression-list };
            ```
            - **–¢–µ–≥ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –Ω–∞ —Å–ø–ª–∞–π–Ω–∞—Ö**
            - **–¢–µ–≥–∏ –∫–æ–Ω—Ç—É—Ä–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –Ω–∞ 2, 3, 4 —Å–ø–ª–∞–π–Ω–∞—Ö**
                
            """)
            
        st.write("""
         - –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ë–µ–∑—å–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE.
         - –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –°–ø–ª–∞–π–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE.
        """)
        geo_code = """
        //Bezier Surface
         SetFactory("OpenCASCADE");
        Point(1) = {0, 0, 0};
        Point(2) = {1, 0.5, 0};
        Point(3) = {2, 0, 0};

        Point(4) = {0, 1, 1};
        Point(5) = {2, 1, 1};

        Point(6) = {0, 2, 0};
        Point(7) = {1, 2.5, 0};
        Point(8) = {2, 2, 0};

        Bezier(1) = {1, 2, 3};  // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        Bezier(3) = {6, 7, 8};  // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        Bezier(4) = {1, 4, 6};  // –õ–µ–≤–∞—è –±–æ–∫–æ–≤–∞—è –∫—Ä–∏–≤–∞—è
        Bezier(5) = {3, 5, 8};  // –ü—Ä–∞–≤–∞—è –±–æ–∫–æ–≤–∞—è –∫—Ä–∏–≤–∞—è

        Curve Loop(1) = {1, 5, -3, -4};

        Bezier Surface(1) = {1};

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤
        Geometry.PointNumbers = 1;
        Geometry.Color.Points = {160, 255, 0};
        Geometry.Color.Lines = {0, 0, 200};
        Geometry.Color.Surfaces = {200, 200, 200};

        //–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 2D-—Å–µ—Ç–∫–∏
        Mesh 2;

        """
        
    elif element_type_2D == "Surface Loop":
        st.write("""
            ```bash
            Surface Loop ( expression ) = { expression-list } < Using Sewing >;
            ```

            - **–¢–µ–≥ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∞**
            - **–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ –≤—Å–µ—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —Ü–∏–∫–ª –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏**
        """)
            
        st.write("""
         - –¶–∏–∫–ª –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –∑–∞–º–∫–Ω—É—Ç—É—é –æ–±–æ–ª–æ—á–∫—É, –∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏).
        """)
        geo_code = """
        //Surface Loop
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏
        L = 1.0; // –î–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞ –∫—É–±–∞
         Nx = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ X
        Ny = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ Y
        Nz = 10; // –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ Z

        Point(1) = {0, 0, 0, L/Nx};
        Point(2) = {L, 0, 0, L/Nx};
        Point(3) = {L, L, 0, L/Nx};
        Point(4) = {0, L, 0, L/Nx};
        Point(5) = {0, 0, L, L/Nx};
        Point(6) = {L, 0, L, L/Nx};
        Point(7) = {L, L, L, L/Nx};
        Point(8) = {0, L, L, L/Nx};

        // –°—Ç—Ä–æ–∏–º –æ—Ç—Ä–µ–∑–∫–∏
        Line(1) = {1, 2};
        Line(2) = {2, 3};
        Line(3) = {3, 4};
        Line(4) = {4, 1};
        Line(5) = {5, 6};
        Line(6) = {6, 7};
        Line(7) = {7, 8};
        Line(8) = {8, 5};
        Line(9) = {1, 5};
        Line(10) = {2, 6};
        Line(11) = {3, 7};
        Line(12) = {4, 8};

        // –°–æ–∑–¥–∞—ë–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
        Line Loop(13) = {1, 2, 3, 4};
        Plane Surface(14) = {13};
        Line Loop(15) = {5, 6, 7, 8};
        Plane Surface(16) = {15};
        Line Loop(17) = {1, 10, -5, -9};
        Plane Surface(18) = {17};
        Line Loop(19) = {2, 11, -6, -10};
        Plane Surface(20) = {19};
        Line Loop(21) = {3, 12, -7, -11};
        Plane Surface(22) = {21};
        Line Loop(23) = {4, 9, -8, -12};
        Plane Surface(24) = {23};

        // –°–æ–∑–¥–∞–µ–º –∑–∞–º–∫–Ω—É—Ç—ã–π –∫–æ–Ω—Ç—É—Ä –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
        Surface Loop(25) = {14, 16, 18, 20, 22, 24};

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤
        Geometry.PointNumbers = 1;
        Geometry.Color.Points = {160, 255, 0};
        Geometry.Color.Lines = {0, 0, 200};
        Geometry.Color.Surfaces = {200, 200, 200};

        //–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 2D-—Å–µ—Ç–∫–∏
        Mesh 2;

        """

    elif element_type_2D == "Physical Surface":
        st.write("""
            ```bash
            Physical Surface ( expression | string-expression <, expression> ) <+|->= { expression-list };
            ```

            - **–¢–µ–≥ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏**
            - **–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ –≤—Å–µ—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —Ü–∏–∫–ª –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏**
        """)
            
        st.write("""
         - –°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.
         """)
        geo_code = """
        //Physiacal Surface
        SetFactory("OpenCASCADE");
        lc = 1e-2;
        Point(1) = {0, 0, 0, lc};
        Point(2) = {.1, 0, 0, lc};
        Point(3) = {.1, .3, 0, lc};
        Point(4) = {0, .3, 0, lc};

        Line(1) = {1, 2};
        Line(2) = {2, 3}; 
        Line(3) = {3, 4};
        Line(4) = {4, 1};

        Curve Loop(1) = {4, 1, -2, 3};
        Plane Surface(1) = {1};

        Physical Curve(5) = {1, 2, 4};

        Physical Surface("My surface") = {1};


        Geometry.PointNumbers = 1;
        Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;

        //–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 2D-—Å–µ—Ç–∫–∏
        Mesh 2;
        """

    st.code(geo_code, language="python")
    
    def save_example_file():
        example_file_path = "./example.geo"
        with open(example_file_path, "w") as f:
            f.write(geo_code)
        return example_file_path
    
    if st.button("–ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é"):
        example_file_path = save_example_file()
        run_gmsh(example_file_path)
    
elif dimensions == "3D":
    element_type_3D = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞", ["Volume", "Sphere", "Box", "Cylinder", "Torus", "Cone", "Wedge", "Physical Volume"])

    if element_type_3D == "Volume":
        st.write("""
            ```bash
            Volume ( expression ) = { expression-list };
            ```

            - **–¢–µ–≥ –æ–±—ä–µ–º–∞**
            - **–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏—Ö –æ–±—ä–µ–º**
            - **–ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—É—Ä –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–Ω–µ—à–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –æ–±—ä–µ–º–∞** 
            - **–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –æ–±—ä–µ–º–µ**
        """)
            
        st.write("""
         - –ö–æ–Ω—Ç—É—Ä –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ, –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–±—â–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π —Å –∫–æ–Ω—Ç—É—Ä–æ–º –≤–Ω–µ—à–Ω–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ, –∏ –¥–≤–∞ –æ–±—ä–µ–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ).
         - –¢–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –∫–æ–Ω—Ç—É—Ä –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ, –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–±—â–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π —Å –¥—Ä—É–≥–∏–º –∫–æ–Ω—Ç—É—Ä–æ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ —Ç–æ–º –∂–µ –æ–±—ä–µ–º–µ (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–≤–∞ –∫–æ–Ω—Ç—É—Ä–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã).
        """)
        geo_code = """
        //Volume
        SetFactory("OpenCASCADE");

        Box(1) = {0, 0, 0, 1, 1, 1}; // –ö—É–± 1x1x1
        Sphere(2) = {0.5, 0.5, 0.5, 0.3}; // –°—Ñ–µ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –∫—É–±–∞

        Surface Loop(3) = {1, 2, 3, 4, 5, 6}; 

        Surface Loop(4) = {7};

        Volume(5) = {3, 4}; // –ö—É–± —Å –≤—ã—Ä–µ–∑–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –æ–±–ª–∞—Å—Ç—å—é

        Geometry.PointNumbers = 1;
        Geometry.SurfaceNumbers = 2;
        Geometry.VolumeNumbers = 3;
        Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;

            
        """

    elif element_type_3D == "Sphere":
        st.write("""
            ```bash
            Sphere ( expression ) = { expression-list };
            ```

            - **–¢–µ–≥ —Å—Ñ–µ—Ä—ã, –∑–∞–¥–∞–Ω–Ω–æ–π —Ç—Ä–µ–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –µ–µ —Ü–µ–Ω—Ç—Ä–∞ –∏ —Ä–∞–¥–∏—É—Å–æ–º**
            - **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ç—Ä–∏ –ø—Ä–µ–¥–µ–ª–∞ —É–≥–ª–∞**
            - **–ü–µ—Ä–≤—ã–µ –¥–≤–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–æ–ª—è—Ä–Ω—ã–π —É–≥–æ–ª —Ä–∞—Å–∫—Ä—ã—Ç–∏—è** 
            - **–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –æ–±—ä–µ–º–µ**
        """)
            
        st.write("""
         - –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ¬´angle3¬ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∑–∏–º—É—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏—è.
         - –°—Ñ–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE.
        """)

        geo_code = """
        //Shere
        SetFactory("OpenCASCADE");

        Sphere(1) = {0, 0, 0, 1, -Pi/2, Pi/2}; // –ü–æ–ª—É—Å—Ñ–µ—Ä–∞ —Ä–∞–¥–∏—É—Å–æ–º 1
        Geometry.PointNumbers = 1;
        Geometry.SurfaceNumbers = 2;
        Geometry.VolumeNumbers = 3;
        Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D-—Å–µ—Ç–∫–∏
        Mesh 3;

        """

    elif element_type_3D == "Box":
        st.write("""
            ```bash
            Box ( expression ) = { expression-list };
            ```

            - **–¢–µ–≥ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–ø–∏–ø–µ–¥–∞, –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–≥–æ–Ω–∞–ª—å—é**
        """)
            
        st.write("""
         - –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE.
        """)
        geo_code = """
        //Box
        SetFactory("OpenCASCADE");

        Box(1) = {0, 0, 0, 2, 1, 3}; // –ü–∞—Ä–∞–ª–ª–µ–ª–µ–ø–∏–ø–µ–¥

        Geometry.PointNumbers = 1;
        Geometry.SurfaceNumbers = 2;
        Geometry.VolumeNumbers = 3;
        Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D-—Å–µ—Ç–∫–∏
        Mesh 3;

        """

    elif element_type_3D == "Cylinder":
        st.write("""
            ```bash
            Cylinder ( expression ) = { expression-list };
             ```

            - **–¢–µ–≥ —Ü–∏–ª–∏–Ω–¥—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–≥–æ —Ç—Ä–µ–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ü–µ–Ω—Ç—Ä–∞ –ø–µ—Ä–≤–æ–π –±–æ–∫–æ–≤–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –≤–µ–∫—Ç–æ—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º–∏ –µ–≥–æ –æ—Å—å –∏ —Ä–∞–¥–∏—É—Å**
            - **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–≥–æ–ª –æ—Å–Ω–æ–≤–∞–Ω–∏—è**
        """)
            
        st.write("""
         - –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE.
        """)
        geo_code = """
        //Cylinder
        SetFactory("OpenCASCADE");

        Cylinder(1) = {0, 0, 0, 0, 3, 0, 0.5}; // –¶–∏–ª–∏–Ω–¥—Ä –≤–¥–æ–ª—å –æ—Å–∏ Y

        Geometry.SurfaceNumbers = 2;
        Geometry.VolumeNumbers = 3;
        Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D-—Å–µ—Ç–∫–∏
        Mesh 3;

        """

    elif element_type_3D == "Torus":
        st.write("""
            ```bash
            Torus ( expression ) = { expression-list };
            ```

            - **–¢–µ–≥ —Ç–æ—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–≥–æ —Ç—Ä–µ–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –∏ –¥–≤—É–º—è —Ä–∞–¥–∏—É—Å–∞–º–∏**
            - **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–≥–ª–æ–≤–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ**
        """)
            
        st.write("""
         - –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE.
        """)
        geo_code = """
        //Torus
        SetFactory("OpenCASCADE");

        Torus(1) = {0, 0, 0, 2, 0.5}; // –¢–æ—Ä

        Geometry.SurfaceNumbers = 2;
        Geometry.VolumeNumbers = 3;
        Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D-—Å–µ—Ç–∫–∏
        Mesh 3;

        """

    elif element_type_3D == "Cone":
        st.write("""
            ```bash
            Cone ( expression ) = { expression-list };
            ```

            - **–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—É—Å, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π —Ç—Ä–µ–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ü–µ–Ω—Ç—Ä–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è, —Ç—Ä–µ–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –≤–µ–∫—Ç–æ—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–≥–æ –µ–≥–æ –æ—Å—å, –∏ –¥–≤—É–º—è —Ä–∞–¥–∏—É—Å–∞–º–∏ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏ –∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è (—ç—Ç–∏ —Ä–∞–¥–∏—É—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º–∏)**
            - **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–≥–ª–æ–≤–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ**
        """)
            
        st.write("""
         - –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE.
        """)
        geo_code = """
        //Cone
        SetFactory("OpenCASCADE");

        Cone(1) = {0, 0, 0, 0, 0, 2, 1, 0.3}; // –ö–æ–Ω—É—Å –≤—ã—Å–æ—Ç–æ–π 2

        Geometry.SurfaceNumbers = 2;
        Geometry.VolumeNumbers = 3;
        Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D-—Å–µ—Ç–∫–∏
        Mesh 3;

        """

    elif element_type_3D == "Wedge":
        st.write("""
            ```bash
            Wedge ( expression ) = { expression-list };
            ```

            - **–¢–µ–≥ –ø—Ä—è–º–æ–≥–æ —É–≥–ª–æ–≤–æ–≥–æ –∫–ª–∏–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π —Ç—Ä–µ–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ç–æ—á–∫–∏ –ø—Ä—è–º–æ–≥–æ —É–≥–ª–∞ –∏ —Ç—Ä–µ–º—è —Ä–∞–∑–º–µ—Ä–∞–º–∏**
            - **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ–ª—å)**
        """)
            
        st.write("""
         - –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π OpenCASCADE.
        """)
        geo_code = """
        //Wedge
        SetFactory("OpenCASCADE");

        Wedge(1) = {0, 0, 0, 2, 2, 1, 1}; // –ö–ª–∏–Ω

        Geometry.SurfaceNumbers = 2;
        Geometry.VolumeNumbers = 3;
        Geometry.Color.Points = {160, 255, 0};
        General.Color.Text = White;
        Geometry.Color.Surfaces = Geometry.Color.Points;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D-—Å–µ—Ç–∫–∏
        Mesh 3;

        """
        

    elif element_type_3D == "Physical Volume":
        st.write("""
            ```bash
            Physical Volume ( expression | string-expression <, expression> ) <+|->= { expression-list };

            ```

            - **–¢–µ–≥ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–º–∞**
            - **–°–ø–∏—Å–æ–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö —Ç–æ–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–º–∞**
        """)
        geo_code = """
        //Physical Volume
        SetFactory("OpenCASCADE");
        Box(1) = {0, 0, 0, 1, 1, 1};
        Sphere(2) = {0.5, 0.5, 0.5, 0.5};
        BooleanDifference(3) = {Volume{1}; Delete; }{ Volume{2}; Delete; };

        Physical Volume("Hollow Cube") = {3};

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D-—Å–µ—Ç–∫–∏
        Mesh 3;

        """

    st.code(geo_code, language="python")
    
    def save_example_file():
        example_file_path = "./example.geo"
        with open(example_file_path, "w") as f:
            f.write(geo_code)
        return example_file_path
    
    if st.button("–ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é"):
        example_file_path = save_example_file()
        run_gmsh(example_file_path)